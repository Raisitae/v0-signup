/**
 * This code was generated by v0 by Vercel.
 */

"use client";

import { useState } from "react";
import { CardTitle, CardHeader, CardContent, Card } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

export function SignInForm() {
  const [email, setEmail] = useState("");
  const [emailError, setEmailError] = useState("");
  const [password, setPassword] = useState("");
  const [passwordError, setPasswordError] = useState("");
  const handleEmailBlur = () => {
    if (!email) {
      setEmailError("Please enter your email");
    } else {
      setEmailError("");
    }
  };
  const handlePasswordBlur = () => {
    if (!password) {
      setPasswordError("Please enter your password");
    } else {
      setPasswordError("");
    }
  };
  return (
    <div className="flex flex-col min-h-screen">
      <div className="flex justify-center items-center flex-1">
        <Card className="w-full max-w-sm">
          <CardHeader>
            <CardTitle className="text-2xl font-bold">Sign in</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <form className="space-y-6">
              <div>
                <Label className="text-base font-medium" htmlFor="email">
                  Email
                </Label>
                <Input
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  id="email"
                  placeholder="Enter email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  onBlur={handleEmailBlur}
                />
                {emailError && (
                  <div className="text-red-500 text-sm mt-1 flex items-center">
                    <TriangleAlertIcon className="w-4 h-4 mr-2" />
                    {emailError}
                  </div>
                )}
              </div>
              <div>
                <Label className="text-base font-medium" htmlFor="password">
                  Password
                </Label>
                <Input
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  id="password"
                  placeholder="Enter Password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  onBlur={handlePasswordBlur}
                />
                {passwordError && (
                  <div className="text-red-500 text-sm mt-1 flex items-center">
                    <TriangleAlertIcon className="w-4 h-4 mr-2" />
                    {passwordError}
                  </div>
                )}
              </div>
              <Button className="w-full rounded-md bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:bg-indigo-600 dark:hover:bg-indigo-700">
                Sign in
              </Button>
            </form>
            <div className="flex items-center my-6">
              <div className="flex-grow border-t border-gray-300" />
              <span className="mx-4 text-sm text-gray-600">or</span>
              <div className="flex-grow border-t border-gray-300" />
            </div>
            <Button
              className="flex items-center justify-center w-full rounded-md border border-gray-200 border-gray-300 py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:border-gray-600 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-200 dark:border-gray-800"
              variant="outline">
              <ChromeIcon className="w-4 h-4 mr-2" />
              Sign in with Google{"\n"}
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

function ChromeIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <circle cx="12" cy="12" r="10" />
      <circle cx="12" cy="12" r="4" />
      <line x1="21.17" x2="12" y1="8" y2="8" />
      <line x1="3.95" x2="8.54" y1="6.06" y2="14" />
      <line x1="10.88" x2="15.46" y1="21.94" y2="14" />
    </svg>
  );
}

function TriangleAlertIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3" />
      <path d="M12 9v4" />
      <path d="M12 17h.01" />
    </svg>
  );
}
